We have implemented Geneva and evaluated it against the Great Firewall (GFW) of China, ISP censorship in India, and HTTPS interception in Kazakhstan. Our results show that Geneva is highly successful at discovering new strategies quickly and efficiently. Across 27 experiments, against the  GFW, Geneva discovered  4 unique species, 8 subspecies (5 of which are novel), and 21 fundamentally different variants of these subspecies. Against both India and Kazakhstan, Geneva discovers 5 species. In in-lab experiments, Geneva independently re-derived 30 of 36 strategies suggested by prior work (failing to generate only the strategies for which we did not give Geneva the building blocks to express, such as sleeping be-tween packets). Moreover, Geneva is efficient: Geneva re-derives all strategies in a manner of hours.
Contributions 
We summarize our contributions as follows:
•We present Geneva, a novel genetic algorithm that efficiently and independently discovers new packet manipulation strategies to circumvent on-path censorship. 
•We present a detailed evaluation of Geneva using experiments both in-lab and against China, India, and Kazakhstan, and analyze the circumvention strategies that Geneva has discovered. 
•We show that Geneva is able to re-derive almost all previously published evasion strategies, derive successful strategies that prior work posited were ineffective, and derive two altogether new species of evasion strategy. 
•We also show that several evasion strategies that were successful in prior work have since become extinct, but that by seeding Geneva with extinct approaches, it can evolve them into new, successful strategies.
2  BACKGROUND
2.1  On-Path Censorship A key component to the design of most nation state censors, including the GFW, is that they cannot rely entirely on in-path censorship. In-path censorship is the type of traffic monitoring most network administrators are familiar with: a direct man-in-the-middle for every connection where the censor processes every individual packet. In-path censors represent a stronger attack model, as they have the power to directly manipulate or drop traffic. However, in-path systems are more computationally expensive to run, and can impose a higher level of overhead to traffic processing. Therefore, although the GFW does have in-path components (it maintains a relatively small IP blacklist, and any packets sent to IPs on that blacklist will be immediately dropped by the GFW [45]), the majority of censorship performed by the GFW is done through “man on the side  ”attacks, or “on-path” censorship. “On-path” or “man-on-the-side” systems can see traffic going by, but sit physically outside the net-work path—these censors can view traffic, but generally cannot modify or drop the traffic. As a consequence, when the on-path system wants to censor or terminate a connection, it does so by injecting packets into the stream to disrupt it. For example, to censor a TCP connection, the GFW injects TCP RST packets; Airtel’s ISP injects a fake response with an HTTP block page.
The backbone of most nation-state level censorship today is Deep Packet Inspection (DPI), which operates similarly to most NIDS. In order to perform DPI, any inspecting NIDS must have a near-complete implementation of the relevant payload stack (such as TCP/IP). In particular, stateful analysis of TCP connections requires NIDS to track information about the state of each connection, such as with Transmission Control Blocks (TCBs). It is up to the specific censor implementation to decide when to begin tracking state for a given connection; for example, it can choose to do so only after a valid three-way handshake [21], but also can do so based on more partial observation, such as the presence of a SYNflag. Due to the vast number of active connections, another important consideration for the censor is to decide when to stop maintaining state for a given connection. Monitors can commonly “tear down” their TCB for a given connection when a FIN handshake is done, or in the presence of valid RST packets [41]
This example strategy has one outbound and one inbound tree. The first (outbound) action-tree duplicates outgoing SYN packets; it replaces the first copy’s TCP flags with SYN/ACK before sending it. It then sends the second copy of the SYN packet unmodified. On the inbound forest, the only action-tree triggers on RST packets and drops them. Collectively, this strategy implements a hybrid of two previously known strategies: TCB-Reversal[41] (characterized by sending a SYN/ACK before the three-way handshake) and RST-Drop[6]. (Unfortunately, as we will see in Section 5, both halves of this hybrid species are now extinct against the GFW.)
